import shutil
import subprocess as sp
from datetime import datetime
from pathlib import Path
from typing import Any

__all__: list[str] = [
    "create_gitignore",
    "check_program_installed",
    "cargo_build",
    "run_cmd",
]


def create_gitignore(
    out_file: str = ".gitignore",
    options: list[Any] = [],
    **kwargs: Any
) -> Path:
    """Simple function to create a gitignore."""

    gitignore = Path(out_file)

    if not options:
        return gitignore

    lines = "\n".join([str(x) for x in options]) + "\n"

    _write_file(gitignore, "w" if not gitignore.exists() else "a", lines, **kwargs)

    return gitignore


def _write_file(file: Path, mode: str, lines: str, **kwargs: Any) -> None:
    header = "# Autogenerated .gitignore file (through Light's automated encode tooling)\n" + \
        f"# Generated at {datetime.now()}\n\n"

    with open(file, mode, **kwargs) as f:
        if mode == "w":
            f.write(header)

        f.write(lines)


def check_program_installed(program: str, installer: str | None = None, _raise: bool = False) -> bool:
    """Check whether a program is installed and raise a FileNotFoundError if it isn't."""
    if not shutil.which(program):
        if not _raise:
            return False

        raise FileNotFoundError(
            f"\"{program}\" could not be found on this system! "
            "If you've installed it, you may need to add it to your PATH."
            + f" Installation instructions: \"{installer}\"" if installer else ""
        )

    return True


def cargo_build(package: str) -> bool:
    """Attempt to build a given cargo package."""
    check_program_installed("cargo", "https://www.rust-lang.org/tools/install/", _raise=True)

    try:
        sp.run(["cargo", "install", str(package)], shell=True)
    except sp.SubprocessError as e:
        raise ValueError(f"An error occurred while trying to build this cargo! \n{str(e)}")

    return True


def run_cmd(params: list[Any] = [], shell: bool = True) -> bool:
    """Try to run a commandline instance with the given params."""

    _params = list(str(param) for param in params)

    try:
        sp.run(_params, shell=shell)
    except sp.SubprocessError as e:
        raise ValueError(f"An error occurred while trying to build this cargo! \n{str(e)}")

    return True
